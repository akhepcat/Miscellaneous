#!/bin/bash
# (c) 2020 Leif Sawyer
# License: GPL 3.0 (see https://github.com/akhepcat/)
# Permanent home:  https://github.com/akhepcat/Miscellaneous/
# Direct download: https://raw.githubusercontent.com/akhepcat/Miscellaneous/master/do-chroot
# 
ROOT=${1}
trap cleanup SIGINT SIGTERM SIGKILL SIGQUIT SIGABRT SIGSTOP SIGSEGV

cleanup() {
	echo "bailing out..."
	[[ ${MOUNTED} -eq 1 ]] && do_umounts
	exit 0
}

do_mounts() {
	# grab all the mountpoints, and submountpoints...
	[[ ! -e ${ROOT}/dev/tty0 ]] && mount --rbind /dev ${ROOT}/dev
	[[ ! -e ${ROOT}/dev/pts/ptmx ]] && mount --rbind /dev/pts ${ROOT}/dev/pts
	[[ ! -e ${ROOT}/proc/version ]] && mount --rbind /proc ${ROOT}/proc
	# don't rbind /sys, because we don't want the cgroups!
	[[ ! -e ${ROOT}/sys/devices/cpu ]] && mount --bind /sys ${ROOT}/sys

	MOUNTED=1
}

do_umounts() {
	if [ ${MOUNTED:-0} -eq 1 ]
	then
		umount --force --lazy --recursive ${ROOT}/sys ${ROOT}/proc ${ROOT}/dev >/dev/null 2>&1
		echo "sometimes umounting kills the permissions on the directory /dev/shm, and umounts /dev/pts"
		echo "run: "
		echo "     sudo chmod 1777 /dev/shm"
		echo "     sudo mount -t devpts none /dev/pts"
		echo "to restore, after removing/ejecting any media"
	fi

}

check_emu() {
	HOST=$(uname -m)
	if [ "${HOST}" != "${HOST##*arm*}" ]
	then
		HOST=arm
	elif [ "${HOST}" != "${HOST##*x86_64*}" -o "${HOST}" != "${HOST##*x86-64*}" ]
	then
		HOST=x86_64
	fi
	if [ -z "$(ls /proc/sys/fs/binfmt_misc/qemu-*  2>/dev/null)" ]
	then
		echo "qemu binfmt_misc support not registered. You may have problems with foreign archs"
		HOST=""
	fi
	# this should only find one, but compatibility libs will show up first, so only use the last found
	LDLIB=$(find ${ROOT}/lib ${ROOT}/lib64 -maxdepth 1 -type f -iname 'ld-uclibc*' -o -iname 'ld-linux*' 2>/dev/null | tail -1)
	TEMU=$(file -L "${LDLIB}" )

	# we can see the library, so we can figure out the emulation
	if [ -z "${TEMU##*x86_64*}" -o -z "${TEMU##*x86-64*}" -o -z "${TEMU##*32-bit*80386*}" ]
	then
		# Intel 32-bit and 64-bit are handled by aarch64
		EMU=aarch64
	elif [ -n "$(ls -l ${ROOT}/lib/ld-linux* 2>/dev/null | grep armeb )" ]
	then
		EMU=armeb
	elif [ -n "$(ls -l ${ROOT}/lib/ld-linux* 2>/dev/null | grep arm-)" ]
	then
		EMU=arm
	elif [ -z "${TEMU##*32*ARM*}" ]
	then
		EMU=armeb
	elif [ -z "${TEMU##*64*ARM*}" ]
	then
		EMU=aarch64
	fi

	if [ -z "${HOST}" -a -z "${EMU}" ]
	then
		echo "Can't reliably determine host/chroot architecture. Aborting."
		cleanup
	fi
	
	if [ -n "${EMU}" -a ! -r "/proc/sys/fs/binfmt_misc/qemu-${EMU}" ]
	then
		EMU=""
		if [ "${EMU}" = "${HOST}" ]
		then
			echo "attempting native chroot without binfmt_misc support"
		else
			echo "no qemu emulator for architecture ${EMU}"
			cleanup
		fi
	fi
}

get_shell() {

	if [ -r ${ROOT}/bin/bash ];
	then
		SHELL=/bin/bash
	elif [ -r ${ROOT}/sbin/bash ];
	then
		SHELL=/sbin/bash
	elif [ -r ${ROOT}/sbin/ash ];
	then
		SHELL=/sbin/ash
	elif [ -r ${ROOT}/bin/ash ];
	then
		SHELL=/bin/ash
	elif [ -r ${ROOT}/sbin/sh ];
	then
		SHELL=/sbin/sh
	elif [ -r ${ROOT}/sbin/sh ];
	then
		SHELL=/sbin/sh
	else
		#HOPE!
		SHELL=sh
	fi
}

echo -n "consider installing/using 'proot' instead for cleaner bind-umount support and more compatibility options"
for s in 1 2 3; do echo -n "."; sleep .3; done;
echo ""

# Does it look like a mounted filesystem?
if [ -n "${ROOT}" ]
then
    ROOT=${ROOT%/}	# strip off a trailing '/'
    if [ -d "${ROOT}/etc" ]
    then
	check_emu

	do_mounts

	[[ -r "${ROOT}/etc/hostname" ]] && export debian_chroot=$(cat ${ROOT}/etc/hostname)
	if [ -n "${EMU}" -a ! -r "${ROOT}/usr/bin/qemu-${EMU}-static" ]
	then
		cp /usr/bin/qemu-${EMU}-static ${ROOT}/usr/bin/ 2>/dev/null
		if [ $? -ne 0 ];
		then
			echo "can't cp emulation binary; check filesystem"
			cleanup
		fi
	fi

	get_shell

	chroot ${ROOT} ${SHELL}

	echo "clean to umount ${ROOT}"
    else
	echo "Can't chroot to dir ${ROOT} - is it a valid filesystem?"
    fi
else
    echo "chroot to where?"
fi

cleanup
