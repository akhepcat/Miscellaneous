#!/usr/bin/perl
# (c) 2023 Leif Sawyer
# License: GPL 3.0 (see https://github.com/akhepcat/)
# Permanent home:  https://github.com/akhepcat/Miscellaneous/
# Direct download: https://raw.githubusercontent.com/akhepcat/Miscellaneous/master/hamnets
# 
use POSIX qw(strftime);
use Getopt::Long;
use Env qw(HOME);

# Uncomment these to use the development versions instead of the system libraries
# my $HAMLIB="/usr/local/src/HamRadio/Hamlib";
# my $RIGCTLp="$HAMLIB/tests/.libs/rigctl";
# my $LDP="LD_PRELOAD=$HAMLIB/src/.libs/libhamlib.so.4";

my $RIGCTL="$LDP $RIGCTLp";
my $PROG=$0;
my $VERSION="1.0";

my %nets;
my %rigs;
my $verbose, $help, $usage, $arg, $color;

my $config=$HOME . ".config/hamnets.cfg";

########################################################

##  The rigs we can use => hamlib rig number, device to use, optional args for rigctl
%{$rigs{"FTdx10"}} = ( "model" => 1042, "dev" => "/dev/ftdx10" );
%{$rigs{"FT-817"}} = ( "model" => 1020, "dev" => "/dev/digirig", "opts" => "-P RTS" );


##  The 'Nets we can access
%{$nets{"akerc"}} = ( "rig" => "FTdx10",	# Req: The name of the rig that can use this 'Net
		 "freq" => 14292000,		# Req: The Frequency of the 'Net
		 "mode" => "USB",		# Req: Which modulation mode to use
		   "pbf" => 0,			# Opt: the passband filter width for the mode, 0 uses mode default
		   "nb" => 0,	 		# Opt: Noise Blanker depth (0=off, range dependent on rig)
		   "nr" => 0.1,			# Opt: (Digital) Noise Reduction depth (0=off, range dependent on rig)
		 "rfil" => 2,			# Opt: Roofing filter width to use (values rig dependent)
	       "preamp" => 10,			# Opt: What preamp level to use (values rig dependent)
	       "starts" => "08:30",		# Req: 24h clock, aka military time
	       "duration" => "30",		# Opt: duration in minutes, default is 60m
	       "days" => "MTWRF",		# Req: s'U'nday, M, T, W, thu'R'sday, F, S
	 "desc" => "Alaska Pacific Emergency Preparedness Net",  # Req: The description of the 'Net
		 );

%{$nets{"noon"}} = ( "rig" => "FTdx10", "freq" => 3920000, "mode" => "LSB", "pbf" => 0,
		    "nb" => 0, "nr" => 0.1, "rfil" => 2, "preamp" => 10,
		    "starts" => "12:00", "days" => "MTWRF",
		    "desc" => "Old Timers Noontime net" );

%{$nets{"snipers"}} = ( "rig" => "FTdx10", "freq" => 3920000, "mode" => "LSB", "pbf" => 0,
		    "nb" => 0, "nr" => 0.1, "rfil" => 2, "preamp" => 10,
		    "starts" => "18:00", "days" => "UMTWRFS",
		    "desc" => "Alaska Snipers Net" );

%{$nets{"pacsea"}} = ( "rig" => "FTdx10", "freq" => 14300000, "mode" => "USB", "pbf" => 0,
		    "nb" => 0, "nr" => 0.1, "rfil" => 2, "preamp" => 10,
		    "starts" => "18:00", "days" => "UMTWRFS",
		    "desc" => "Pacific Seafarers Net" );

%{$nets{"bush"}} = ( "rig" => "FTdx10", "freq" => 7093000, "mode" => "LSB", "pbf" => 0,
		    "nb" => 0, "nr" => 0.1, "rfil" => 2, "preamp" => 10,
		    "starts" => "20:00", "days" => "UMTWRFS",
		    "desc" => "Alaska Bush Net" );

%{$nets{"motley"}} = ( "rig" => "FTdx10", "freq" => 3933000, "mode" => "LSB", "pbf" => 0,
		    "nb" => 0, "nr" => 0.1, "rfil" => 2, "preamp" => 10,
		    "starts" => "21:00", "days" => "UMTWRFS",
		    "desc" => "Alaska Motley Net, by KL7G" );

%{$nets{"swap"}} = ( "rig" => "FTdx10", "freq" => 3920000, "mode" => "LSB", "pbf" => 0,
		    "nb" => 0, "nr" => 0.1, "rfil" => 2, "preamp" => 10,
		    "starts" => "10:00", "days" => "S",
		    "desc" => "Alaska Swap Net- WL7PM" );

%{$nets{"erc-hf"}} = ( "rig" => "FTdx10", "freq" => 3880000, "mode" => "LSB", "pbf" => 0,
		    "nb" => 0, "nr" => 0.1, "rfil" => 2, "preamp" => 10,
		    "starts" => "20:30", "days" => "U",
		    "desc" => "ERC on 80m" );

%{$nets{"emergency"}} = ( "rig" => "FTdx10", "freq" => 5167500, "mode" => "USB", "pbf" => 0,
		    "nb" => 0, "nr" => 0.1, "rfil" => 2, "preamp" => 10,
		    "starts" => "10:00", "days" => "S",
		    "desc" => "AK emergency band - testing net on last saturday of month" );

## FT-817
%{$nets{"morning"}} = ( "rig" => "FT-817", "freq" => 145500000, "mode" => "FM", "pbf" => 0,
		    "preamp" => 10, shift => "0", "tone" => 0,
		    "starts" => "10:00", "days" => "UMTWRFS",
		    "desc" => "Alaska Morning Net" );

%{$nets{"erc-vhf"}} = ( "rig" => "FT-817", "freq" => 147330000, "mode" => "FM", "pbf" => 0,
		    "preamp" => 10, shift => "+", "tone" => 103.5,
		    "starts" => "19:30", "days" => "U",
		    "desc" => "ERC Net" );

%{$nets{"noname"}} = ( "rig" => "FT-817", "freq" => 146430000, "mode" => "FM", "pbf" => 0,
		    "preamp" => 10, shift => "simplex", "tone" => 0,
		    "starts" => "20:00", "days" => "U",
		    "desc" => "NoName Net, also MatSu Elmers" );

%{$nets{"vnnet1"}} = ( "rig" => "FT-817", "freq" => 146580000, "mode" => "FM", "pbf" => 0,
		    "preamp" => 10, shift => "simplex", "tone" => 0,
		    "starts" => "20:00", "days" => "M",
		    "desc" => "Valley North Net (simplex)" );

%{$nets{"vnnet2"}} = ( "rig" => "FT-817", "freq" => 147120000, "mode" => "FM", "pbf" => 0,
		    "preamp" => 10, shift => "+", "tone" => 0,
		    "starts" => "20:00", "days" => "M",
		    "desc" => "Valley North Net (repeater)" );

%{$nets{"grand"}} = ( "rig" => "FT-817", "freq" => 144200000, "mode" => "USB", "pbf" => 0,
		    "starts" => "08:00", "days" => "M",
		    "preamp" => 10, "desc" => "Grandson of Sideband Net (NL7SK)" );

%{$nets{"south"}} = ( "rig" => "FT-817", "freq" => 146520000, "mode" => "FM", "pbf" => 0,
		    "preamp" => 10, shift => "simplex", "tone" => 0,
		    "starts" => "19:00", "days" => "W",
		    "desc" => "SouthCentral simplex" );

%{$nets{"parka"}} = ( "rig" => "FT-817", "freq" => 147300000, "mode" => "FM", "pbf" => 0,
		    "preamp" => 10, shift => "+", "tone" => 141.3,
		    "starts" => "19:00", "days" => "R",
		    "desc" => "Parka Net (repeater)" );

%{$nets{"ares"}} = ( "rig" => "FT-817", "freq" => 147340000, "mode" => "FM", "pbf" => 0,
		    "preamp" => 10, shift => "+", "tone" => 103.5,
		    "starts" => "19:00", "days" => "R",
		    "desc" => "Ares Net (repeater)" );

%{$nets{"vhfup"}} = ( "rig" => "FT-817", "freq" => 144200000, "mode" => "USB", "pbf" => 0,
		    "starts" => "09:30", "days" => "R",
		    "preamp" => 10, "desc" => "VHF Up Net (net control KL7H)" );

%{$nets{"tech"}} = ( "rig" => "FT-817", "freq" => 146790000, "mode" => "FM", "pbf" => 0,
		    "preamp" => 10, shift => "-", "tone" => 100.0,
		    "starts" => "17:30", "days" => "F", "duration" => "120",
		    "desc" => "Tech Net (ends 1930)" );

%{$nets{"swap-vhf"}} = ( "rig" => "FT-817", "freq" => 146790000, "mode" => "FM", "pbf" => 0,
		    "preamp" => 10, shift => "-", "tone" => 100.0,
		    "starts" => "19:30", "days" => "F",
		    "desc" => "Swap Net" );

##########################################################################
## Color definitions, from https://raw.githubusercontent.com/fidian/ansi/master/images/color-codes.png

my $red=160;	#d70000		# pepsi red
my $yellow=226;	#ffff00		# yellow
my $brgreen=82;	#5fff00 	# bright green
my $green=34;	#00af00		# islam green
my $orange=136;	#af8700		# dark goldenrod
my $brown=99;	#875f5f		# pastel brown
my $grey=248;	#a8a8a8		# dark grey

##########################################################################
sub perror {
	my @args =shift;
	
	if ($color) {
		print "\e[1m\e[38;5;${red}m", @args, "\e[0m";
	} else {
		print @args;
	}
}

sub pwarn {
	my @args =shift;
	
	if ($color) {
		print "\e[1m\e[38;5;${yellow}m", @args, "\e[0m";
	} else {
		print @args;
	}
}

sub cprint {
	my ($c, $text) = @_;
	
	if ($color) {
		pcolor($c); print $text; pcolor(-1);
	} else {
		print $text;
	}
}

sub pcolor {
	my $c = shift;
	if ($c >=0) {
		print "\e[38;5;${c}m";
	} else {
		print "\e[0m";
	}
}

sub set_net {
	my $n=shift;
	my $cmdlist;
	
	# Set the Mode and bandwidth first
	$cmdlist.=qq|M $nets{$n}{"mode"} $nets{$n}{"pbf"}\n|;

	# Set the frequency after mode, so we don't run into offsetting
	$cmdlist.=qq|F $nets{$n}{"freq"}\n|;

	# next set repeater offset frequencies, if applicable
	if ($nets{$n}{"mode"} eq "FM" || $nets{$n}{"mode"} eq "WFM") {
		my $sf=0; my $sp=0; my $rshift="simplex";

		if (defined($nets{$n}{"shift"})) {
			$rshift = $nets{$n}{"shift"};

			if ($rshift eq "simplex") {
				$sf=0; $sp="0";
			} elsif ( m/\+/,$rshift ) {
				$sf = s/\+//,$rshift;
				$sp = "+";
			} elsif ( m/-/,$rshift ) {
				$sf = s/-//,$rshift;
				$sp = "-";
			} else {
				$sf=0; $sp="0";	# dunno what they wanted, but it wasn't clear
			}
		}

		if ( $sp ne "0" && $sf == 0 ) {
			# Automatic repeater offsets as follows
			if ($nets{$n}{"freq"} >= 29500000 && $nets{$n}{"freq"} <= 29700000 ) {
				$sf = 100000;  $sp = "-";
			} elsif ($nets{$n}{"freq"} >= 51620000 && $nets{$n}{"freq"} <= 539800000 ) {
				$sf = 500000;  $sp = "-";
			} elsif ($nets{$n}{"freq"} >= 145200000 && $nets{$n}{"freq"} <= 146970000 ) {
				$sf = 600000;  $sp = "-";
			} elsif ($nets{$n}{"freq"} >= 147000000 && $nets{$n}{"freq"} <= 147390000 ) {
				$sf = 600000;  $sp = "+";
			} elsif ($nets{$n}{"freq"} >= 223850000 && $nets{$n}{"freq"} <= 224980000 ) {
				$sf = 1600000;  $sp = "-";
			} elsif ($nets{$n}{"freq"} >= 440000000 && $nets{$n}{"freq"} <= 445000000 ) {
				$sf = 5000000;  $sp = "+";
			} elsif ($nets{$n}{"freq"} >= 447000000 && $nets{$n}{"freq"} <= 450000000 ) {
				$sf = 5000000;  $sp = "-";
			} elsif ($nets{$n}{"freq"} >= 1282000000 && $nets{$n}{"freq"} <= 12940000000 ) {
				$sf = 12000000;  $sp = "-";
			} else {
				$sf = 0; $sp = "0";
			}
		}
		
		$cmdlist.=qq|O $sf\n|;
		$cmdlist.=qq|R $sp\n|;
	}

	# Next we set the CTCSS tone
	if (defined($nets{$n}{"tone"})) {
		my $hz = $nets{$n}{"tone"} * 10;
		$cmdlist.=qq|C $hz\n|;
	}
	

	if (defined($nets{$n}{"rfil"})) {
		# Set the bandpass filter to 3khz
		$cmdlist.=qq|L ROOFINGFILTER $nets{$n}{"rfil"}\n|;
		# Set the preamp to "amp1"
		$cmdlist.=qq|L PREAMP $nets{$n}{"preamp"}\n|;
	}
	
	if (defined($nets{$n}{"nb"})) {
		# Check for noise blanking
		if ($nets{$n}{"nb"} > 0) {
			# Set the noise blanker level NB(1..10/1)
			$cmdlist.=qq|L NB $nets{$n}{"nb"}\n|;
		} else {
			# Disable the noise blanker
			$cmdlist.=qq|L NB 0\n|;
		}
	}

	if (defined($nets{$n}{"nr"})) {
		# Check for noise reduction
		if ($nets{$n}{"nr"} > 0) {
			# Set the DNR to level 1  ( NR(0..1/ 0, .1, .15, .2 ...)
			$cmdlist.=qq|L NB $nets{$n}{"nr"}\n|;
			$cmdlist.=qq|U NR 1\n|;
		} else {
			# Disable the digital noise reducer
			$cmdlist.=qq|U NR 0\n|;
		}
	}

	# Lastly, figure out which rig to send it to, and push the configs!
	my $r=$nets{$n}{"rig"};
#	print( qq^bash -c "$RIGCTL -r $rigs{$r}{'dev'} -m $rigs{$r}{'model'} $rigs{$r}{"opts"} <(($cmdlist)) \n" ^ );
	system( qq^bash -c "echo '$cmdlist' | $RIGCTL -r $rigs{$r}{'dev'} -m $rigs{$r}{'model'} $rigs{$r}{"opts"} - \n" ^ );
}

sub pweek {
    $_ = shift;
    my $s;

    if (m/U/) { $s = "U"; } else {$s = ".";}
    if (m/M/) { $s .= "M"; } else {$s .= ".";}
    if (m/T/) { $s .= "T"; } else {$s .= ".";}
    if (m/W/) { $s .= "W"; } else {$s .= ".";}
    if (m/R/) { $s .= "R"; } else {$s .= ".";}
    if (m/F/) { $s .= "F"; } else {$s .= ".";}
    if (m/S/) { $s .= "S"; } else {$s .= ".";}

    return $s;
}

sub dsum {
    my $n = shift;
    my $s=0; my $r=0;
    my $t = $nets{$n}{"starts"};

    $_ = $nets{$n}{"days"};

    if (m/U/) { $s += 7**7; }
    if (m/M/) { $s += 7**6; }
    if (m/T/) { $s += 7**5; }
    if (m/W/) { $s += 7**4; }
    if (m/R/) { $s += 7**3; }
    if (m/F/) { $s += 7**2; }
    if (m/S/) { $s += 7**1; }

    $r = ($s * 10000) + (1440 - timetomins($t));
    return ($r);
}


sub istoday {
	$_ = shift;
	my $dow = (localtime)[6];
	my $ret = 0;
	
	if ( $dow == 0 && m/U/ ) { $ret = 1; }
	if ( $dow == 1 && m/M/ ) { $ret = 1; }
	if ( $dow == 2 && m/T/ ) { $ret = 1; }
	if ( $dow == 3 && m/W/ ) { $ret = 1; }
	if ( $dow == 4 && m/R/ ) { $ret = 1; }
	if ( $dow == 5 && m/F/ ) { $ret = 1; }
	if ( $dow == 6 && m/S/ ) { $ret = 1; }

	return $ret;
}

sub usage {
	perror "usage: ${PROG} [-v] [-h] [net]\n";
	print "       ver: $VERSION\n";
	pwarn "\t -v  verbosely show all nets, instead of just for today\n";
	pwarn "\t -c  enable Color\n";
	pwarn "\t -h  this help\n";
}

sub timetomins {
	$_ = shift;
	my ($h,$m) = split(/:/);
	my $t = 0;
	
	$t = ($h * 60 ) + $m;

	return($t);
}
	
sub soon {
	my ($s,$dur) = @_;
	my $t = timetomins( (localtime)[2] . ":" . (localtime)[1] );
	my $d = $s - $t;

#	print "\nDBG: s: $s,  t: $t,  d: $d\n";		
	if ($s > $t) {
		# upcoming events
		if ( $d <= 15 ) {
			return 1;
		} elsif ($d <= 90 ) {
			return 2;
		} else {
			return 3;
		}
	} else {
		if ( (($dur != 0) && ($d > -($dur))) || ($d > -60) ) {
			return 4;
		}
	}
	return 0;
}

sub displaynets {
	if ($verbose) {
		cprint(51, "  net can be:\n");
	} else {
	        cprint(51, "  net for today can be:\n");
	}
	if ($color) {
		cprint($grey,  "     * time passed\n");
		cprint($brgreen,  "     * Currently in progress\n");
		cprint($green,  "     * starting within 15m\n");
		cprint($orange, "     * starting within 90m\n");
		cprint($brown,  "     * starting much later\n");
	}

	foreach my $rig (sort keys %rigs) {
		if ( -e $rigs{$rig}{"dev"} && -R _ ) {
			printf("\n\t%s:\n", $rig );
			foreach my $net (sort { ( dsum($b) <=> dsum($a) ) } keys %nets) {
				if ( $color && istoday($nets{$net}{"days"}) ) {
					my $s = soon(timetomins($nets{$net}{"starts"}));
					if ( $s eq 1) {
						pcolor($green);
					} elsif ( $s eq 2) {
                                                pcolor($orange);
					} elsif ( $s eq 3) {
                                                pcolor($brown);
					} elsif ( $s eq 4) {
                                                pcolor($brgreen);
					} else {
						pcolor($grey);
					}
				}

				printf("\t%10s (%8.04f MHz %3.3s) - %5.5s (%s) - %s\n", 
					$net, 
					$nets{$net}{"freq"} / 1000000,
					$nets{$net}{"mode"}, 
					$nets{$net}{"starts"}, 
					pweek($nets{$net}{"days"}), 
					$nets{$net}{"desc"} ) 
					if ( $nets{$net}{"rig"} eq $rig && ($verbose || istoday($nets{$net}{"days"}))) ;

				if ($color) {
					pcolor(-1);
				}
			}
		}
	}
	printf("\n");
}


############################################################


#Get the options from the command line.
GetOptions(
  "v!"  => \$verbose,
  "h!"  => \$help,
  "c!"  => \$color,
);

$arg = $ARGV[0];

$_ = $PROG;
if ( (m/c$/) || (m/color$/)) {
	$color=1;
}

if ( $help ) {
	usage;
	exit 1;
}

if ( ! $arg ) {
	displaynets;
	exit 0;
}


if (defined($nets{$arg})) {
	set_net($arg);
} else {
	perror "ERROR: no such net\n";
}

printf("\n");

